#!/opt/perl-5.8.8/bin/perl

# Copyright 2010-2013 Andrew Leiserson <andy@leiserson.org>
# See the file README in the VP3 distribution for more information.

=head1 NAME

VP3 - Verilog preprocessor and generator

=head1 SYNOPSIS

  vp3 -y . -o module.v module.vp

=head1 DESCRIPTION

VP3 is a tool to assist in the description of a hardware design in Verilog. VP3
can generate module instantiations and signal declarations for you. It provides
a preprocessor function comparable to the C preprocessor, and allows you to
generate portions of your Verilog with embedded perl code.

VP3 works on the input in several passes. The first pass is a preprocessor. Two
preprocessors are currently supported. The built-in preprocessor is used by
default. If you specify the C<-p ep3> option, the ep3 tool will be invoked to
preprocess the source. To use the ep3 preprocessor, C<Text::EP3> must be
installed (available on CPAN).

After preprocessing is complete, VP3 parses the input, which should consist of
Verilog and VP3 directives. VP3 then performs the following translations:

=over 4

=item *

Expands C<@Instance> directives to a complete module instantiation.

=item *

Analyzes signal usage by the design and constructs a connectivity database.

=item *

Expands remaining VP3 directives. The C<@Regs> and C<@Wires> directives
generate declarations for any signals identified in the previous step that are
not otherwise declared.

=back

The core processing steps are performed on a module-by-module basis. If there
are multiple modules in the file, VP3 will process them in bottom-to-top
hierarchical order, regardless of the order they appear in the input.

After processing has completed, VP3 performs a connectivity check on the design.
Unloaded and undriven signals are flagged. Note that port inference for
unconnected signals will mask many of these connectivity errors.

=head2 Why use VP3?

=over 4

=item *

Saves tedious and error prone typing.

=item *

Instance expansion with regular expression renaming rules is more powerful than
SystemVerilog wildcard connects (.*)

=item *

Using VP3 shorthand rather than a complete verilog description reduces the
verbosity of the design description, improving maintainability

=item *

Immediate feedback about potential design issues (unconnected signals, width
mismatch, etc...) during RTL entry.

=item *

Compared to editor-based tools like Verilog-mode for Emacs, VP3 has the
advantage that it does not inflame editor holy wars and does not encourage
placing generated code under version control.

=back

=head1 OPTIONS

=over 4

=item -o file

Required. Specifies where to write the output.

=item -p preprocessor

Optional. Specifies an alternate preprocessor. The available preprocessors are
C<standard> (the default), and C<ep3>.

=item --debug

Optional. Enables additional debug output.

=item --vdefine NAME, --vdefine NAME=VALUE

Optional. Defines the Verilog preprocessor macro `NAME, either with an empty
expansion, or as VALUE.

=item --define NAME[=VALUE]

Optional. Defines the VP3 preprocessor macro NAME, either with an empty
expansion, or as VALUE.

=item --vinclude path

Optional. Specifies include paths in which to search for Verilog C<`include>
files.

=item -i path, --include path

Optional. Specifies include paths in which to search for VP3 preprocessor
C<@include> files.

=item -v file

Optional. Specifies a Verilog library file to search for instantiated modules.
Libraries specified with C<-v> must be completely read and parsed to determine
if they contain a sought module, so their use entails a performance penalty.

=item -y path

Optional. Specifies a Verilog library directory to search for instantiated
modules. The module is expected to be defined in a file named C<module.v> in one
of the specified library directories.

=item -w

Optional. Treat warnings as errors.

=back

=head1 DIRECTIVES

There are two classes of directives: preprocessor directives and VP3 directives.
By convention, preprocessor directives start with a lower case letter, and VP3
directives start with an upper case letter.

=head2 Preprocessor directives

The built-in preprocessor supports the following directives. Consult the
C<Text::EP3> documentation for information on preprocessor directives in
C<-p ep3> mode.

=over 4

=item @define NAME value

Defines C<NAME> as a preprocessor macro to be substituted with C<value>.

=item @include "file"

Includes the contents of C<file> at the current source location.

=item @perl_begin ... @perl_end

Usage:

  @perl_begin
  # any number of lines of perl code
  @perl_end

Evaluates the text between the begin/end directives as perl code.

The embedded perl code may emit text into the preprocessor output by calling
C<vprint>.

Any subroutines defined by the perl code will become available to the remainder
of the source as a directive with the same name. When invoked, the directive
subroutine will be passed a single argument containing the text (if any) on the
line, with the directive and any whitespace after the directive name removed.

=item @if

Introduces a conditional section of the source. The remainder of the line after
C<@if> is macro-expanded and then evaluated as perl code. The conditional
section continues until the next matching C<@elsif>, C<@else>, or C<@endif>
directive. Conditional sections may be nested.

=item @ifdef / @ifndef

Introduces a conditional section of the source. The remainder of the line after
the directive must consist of a single identifier. For C<@ifdef>, if that
identifier has been previously defined as a preprocessor macro, the conditional
section will be included. For C<@ifndef>, the conditional section is included if
the identifier has not been previously defined.

=item @elsif

Must be preceeded by one or more conditional directives. C<@elsif> terminates
the preceeding conditional section and introduces a new section. The section
following C<@elsif> is ignored if a previous section in the current conditional
chain has been included. Otherwise, the section following C<@elsif> is included
if the condition specified after the directive is true. C<@elsif> may be
followed either by a single identifier, in which case that identifier is tested
in the same manner as C<@ifdef>, or by a complex expression, in which case that
expression is tested in the same manner as C<@if>.

=item @else

Similar to C<@elsif>, but with an implicit true condition.

=item @endif

Ends a chain of conditional sections.

=back

=head2 VP3 directives

=over 4

=item @Module

Usage:

  @Module [-none] [-v2k] [-attr <attributes>] [module_identifier] ;

The C<@Module> directive introduces a module. If the C<module_identifier> is
not given, the module name will be taken from the name of the input file.
Except for the special case of C<@Module -none> (see below), C<@Module> should
have a corresponding C<endmodule>.

The C<@Module> directive accepts the following options:

=over 4

=item -attr <attributes>

The C<-attr> option prints the specified text as attribute(s) on the generated
module header. The string given should not include the C<(*> and C<*)>
delimeters.

=item -none

Enter module context, but don't generate any C<module> statement. This may be
useful to generate files to be inserted in other source using C<`include>. When
C<@Module -none> is used, do not use C<endmodule>. In this mode, connectivity
validation is disabled.

=item -v2k

The C<-v2k> option causes the generated module header to use the Verilog-2001
syntax, which has full port declarations inline with the header. For more
detail, see below.

=back

The C<@Module> directive is useful when using VP3's optional port inference
function, which automatically creates port declarations for signals that are
undriven or unloaded in the input module description:

=over 4

=item *

For Verilog-1995-style module headers, use the C<@Module> directive (without
the C<-v2k> option) regardless of whether inferred ports are desired. If
inferred ports are desired, specify the C<@Ports> directive within the module.
Whether or not port inference is enabled, VP3 will scan the module definition
for C<input> and C<output> declarations, and C<@Module> will include
identifiers found in those declarations in the generated port list. If
C<@Ports> is specified in the module, C<@Module> will also include the names of
any inferred ports in the generated port list.

=item *

For Verilog-2001-style module headers, use C<@Module -v2k> if and only if port
inference is desired. When using inferred ports, signals may be explicitly
declared as I/O with the C<@Input> and C<@Output> directives. If port inference
is not desired, do not use the C<@Module> directive. Code the module header
directly in Verilog syntax.

=back

=item @Ports

Usage:

  @Ports;

The C<@Ports> directive generates Verilog-1995 port declarations for any
signals used in the module that are undriven or unloaded. An input or output
port will be defined, as applicable.

When using Verilog-2001 module headers, inferred ports are generated directly
in the module header by C<@Module>. C<@Ports> should not be used.

=item @Regs, @Wires

Usage:

  @Regs;
  @Wires;

These directives generate signal declarations for signals that are used in the
source but are not otherwise declared. The type of declaration is inferred
automatically based on usage.

=item @Input, @Output

Usage:

  @Input signal_identifier;
  @Output signal_identifier;

These directives force a signal to be declared as an input or output even if it
would not normally be inferred as such. A typical usage is a signal that is used
locally within the module but is also required in other modules. The local usage
of the signal would normally prevent automatic output port declaration.

These directives should be used only when ports are being inferred with
C<@Ports> or C<@Module -v2k>. Otherwise, the desired port declarations should be
coded explicitly.

=item @Waive

Usage:

  @Waive no_source signal_identifier;
  @Waive no_sink signal_identifier;

The C<@Waive> directive inhibits connectivity errors for the specified signals.

=item @Vector

Usage:

  @Vector expression signal_identifier;

  @Vector [msb:lsb] signal_identifier;

The C<@Vector> directive specifies the size of the specified signal. The size
will be used in any autogenerated declarations for that signal. The size may be
specified as a single number, in which case the signal range will be
[size-1:0], or the range may be specified directly.

=item @Unparsed

Usage:

  @Unparsed begin;
  // unsupported Verilog constructs
  @Unparsed end;

The C<@Unparsed> directive provides a means to pass through Verilog constructs
that are not yet supported by the VP3 parser. It can also be used around code
that should not be processed by VP3 for some other reason. The text between the
directives will be included verbatim in the output. No connectivity analysis or
VP3 directive expansion will be performed on the unparsed section.

=item @Instance

Usage:

  @Instance [-file instance.v] instance instance_name
    -connect instance_portA     connectionA
    -connect instance_portB     connectionB
    -connect /^instance_prefix/ connection_prefix
  ;

The C<@Instance> directive expands as an instantiation of the specified module.
The source of the instantiated module must either be located in one of the
search locations specified on the command line or be specified with the C<-file>
option.

By default, ports of the instantiated module will be connected to like-named
signals in the current module. The connection can be modified with C<-connect>
options. The first argument after C<-connect> is a pattern to match against the
ports of the instantiated module, and the second argument is replacement text.
If the pattern is not delimited by slashes, it must match the full port name
(C<^> and C<$> are implicitly added to the pattern). If the pattern is delimited
by slashes, it may match any part of the port name, and the replacement will be
applied only to the matching part.

=back

=head1 PERL FUNCTIONS

VP3 provides some functions which may be used by user Perl code running in
C<@perl_begin>/C<@perl_end> sections.

=over 4

=item vexpr

Usage:

  vexpr ("verilog expression")

Example:

  vexpr ("2 + 2")
  // Returns 4

The C<vexpr> function allows user code to call VP3's expression evaluation
engine.

=item vports

Usage:

  vports ("module")

The C<vports> function searches for the specified module using the same search
locations that would be used for a C<@Instance> directive, parses it, and
returns a list of the ports of the module. The return value is a C<VP3::Ports>
object.

=item vprint

Usage:

  vprint (list)

This function prints the provided arguments into the intermediate Verilog. Text
inserted in will be seen by the later phases of VP3 processing. This means that
it is possible to emit, for example, VP3 C<@Instance> directives.

This function is provided only under the built-in preprocessor. When using the
ep3 preprocessor, C<print> should be used instead. The built-in preprocessor
preserves C<print> as a means of printing text to the console.

=back

=head1 BUGS

This is alpha-quality software and bugs are to be expected. Please report bugs
in the issue tracker on github.

The following Verilog constructs are not yet supported:

=over 4

=item *

specify blocks

=item *

primitives (gates and UDPs)

=item *

text macros with arguments

=item *

preprocessor directives other than `timescale, `include, `define, `undef, and
`line

=item *

ports connected by order (accepted by the parser but not understood for
connectivity analysis)

=item *

complex ports (all the examples other than C<module test> in section 12.3.3 of
the standard)

=item *

instance arrays

=item *

generate blocks (accepted by the parser but not otherwise handled)

=item *

big-endian vectors

=item *

port connection attributes, and some other attribute uses that are (I hope)
esoteric

=back

=head1 AUTHOR

Andrew Leiserson <andy@leiserson.org>

=cut

# The following features from recent perls are used:
# * lvalue subroutines (5.6)
# * open scalar as a filehandle a la istrstream (5.8 / PerlIO)

use 5.008;

use strict;
use warnings FATAL => qw(all);

# Note that a version with one dot ("0.x") is treated as 0.x00 whereas a
# version with two dots ("0.x.y") is treated as 0.00x00y
our ($VERSION) = "0.1.65";

######################################################################

use VP3::RTLTool;

my $rt = VP3::RTLTool->new (@ARGV);

my $r = $rt->process;

exit ($r ? 0 : 1);

# vim: sts=4 sw=4 et
